TeamBots On Mac
---------------------

TeamBots (c) 1999, 2000 by Tucker Balch, GTRC and Carnegie Mellon University
Please see the file Docs/copyright.html for detailed copyright information.

Teambots has been compiled and run on MacOS.

We recommend the following (free) configuration:

 MacOS 9 or later (this is required for long-filename support)
 MRJ 2.2 or later (this is required for long-filename support)
 MRJ SDK
 JShell (optional)
 FanctAPI2Mac (optional)

MRJ and its SDK are available from: <http://developer.apple.com/java/>.
JShell is a freeware shell available from: <http://www.vmeng.com/beard/JShell/>.
FancyAPI2Mac is available from: <http://www.amug.org/~glguerin/sw/index.html#doc-convert>.

Metrowerks Codewarrior <http://www.metrowerks.com/> is also quite nice.  It will allow you to compile teambots on a system without long filename support.

Background
---------------------

The MacOS traditionally had a filename length limit of 32 characters.  As of MacOS 8.5 the Mac could read HFS+ formatted disks without this limit, but there was no API to use extra length.  Any filenames longer than 32 characters were referred to using a truncated name.  As of MacOS 9.0 there is an API for programs to use the long filename support of HFS+, but the Finder itself still uses the old API and so displays truncated filenames.

MRJ 2.2 and later use the long filename support available in MacOS 9.  Warning: If you have MRJ2.2ea2 you should upgrade to MRJ 2.2 final - the long-filename support in this version of MRJ is buggy and could cause data loss.

At the time of writing not many Apps apart from MRJ use the long-filename support.  In particular, Stuffit Expander 5.5 from Aladdin Systems truncates all filenames.

Long Filenames and Java
---------------------

Java uses long filenames in two places:

  The first is in the names of the java source and class files.  Convention, enforced by most java compilers, has each public class in a file with the name of that class.  If a class name is over 26 characters (need to leave room for '.java'/'.class') then it will not fit within the MacOS's 32 char limit.

  The second place is in JavaDoc filenames.  Traditional java 1.1 javadoc places not just the class name, but its package name in the filename.  This leads to very long filenames.  There are tools to use a directory hierarchy for the packages.  Even once this has been done, you still need to be careful with long classnames; as with the source, individual classnames can be too long.  There are currently no mac browsers that support the long filename API.

  Some of the files in TeamBots are longer than 26 characters.  These problems must be handled to use teambots on a mac.

Extraction
---------------------

As mentioned above, most decompression/expansion/extraction tools on the mac truncate the expanded filenames to 32 characters.  This is bad.  We suggest using the java 'jar' tool to avoid this truncation.

 - create a new folder
 - place the TeamBots.zip file in the folder
 - Run JShell
 - drop your folder on the JShell window, or otherwise cd to that directory
 - type 'jar -xf TeamBots.zip'

You can also use the jar tool in the MRJ SDK.  Unfortunatly in the current version of that tool there does not seem to be a way to set the output directory.

You should now have an extracted copy of teambots with long filenames in tact (although they will appear truncated in the finder).  You can check the long filenames are in tact using JShell.

Compilation
---------------------

There is no Make on the Mac.  You can use the SDK javac.  We are working on moving to ANT; a java-based, cross-platform build tool that will make compilation easier.

JavaDocs
---------------------

As mentioned above there are two problems that need to be solved to use JavaDoc on the Mac.  The first is moving the package information from the filenames to a folder hierarchy.  The JDK1.2 javadoc tool generates docs in this form, as does the MRJ SDK JavaDoc tool.  It is also possible to use FancyAPI2Mac to convert jdk 1.1 docs to this form.

The second problem is dealing with long classnames.  Currently only the MRJ SDK JavaDoc tool and FancyAPI2Mac deal with this problem (and the CodeWarrior JavaDoc tool, if you've bought CodeWarrior).

So, you can either:

 - regenerate the JavaDocs using the MRJ SDK JavaDoc tool, or
 - take the docs generated by a normal (non-mac) JavaDoc command and convert them with FancyAPI2Mac.

Good luck,

Will Uther    <will+@cs.cmu.edu>
